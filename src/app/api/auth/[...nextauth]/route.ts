/*
 * Copyright 2024 Nordeck IT + Consulting GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { jwtDecode } from 'jwt-decode';
import NextAuth, { AuthOptions, CookiesOptions } from 'next-auth';
import KeycloakProvider from 'next-auth/providers/keycloak';
import { attemptAccount } from './account';
import { refreshAccessToken } from './refreshAccessToken';
import { attemptSessionAccessToken } from './sessionAccessToken';
import { attemptSessionToken } from './sessionToken';
import { attemptSignInToken } from './signInToken';
import {SessionToken, SessionType} from "@/types/types";

export const authOptions: AuthOptions = {
  providers: [
    KeycloakProvider({
      clientId: `${process.env.KEYCLOAK_CLIENT_ID}`,
      clientSecret: `${process.env.KEYCLOAK_CLIENT_SECRET}`,
      issuer: `${process.env.KEYCLOAK_ISSUER}`,
    }),
  ],

  callbacks: {
    async jwt({ token, account }): Promise<SessionToken> {
      const nowTimeStamp = Math.floor(Date.now() / 1000);

      if (account) {
        const signInToken = attemptSignInToken(token);
        const accountParsed = attemptAccount(account);
        const accessTokenParsed = attemptSessionAccessToken(
          jwtDecode(accountParsed.access_token),
        );

        return {
          name: signInToken.name,
          email: signInToken.email,
          decoded: accessTokenParsed,
          access_token: accountParsed.access_token,
          id_token: accountParsed.id_token,
          expires_at: accountParsed.expires_at,
          refresh_token: accountParsed.refresh_token,
        };
      } else {
        const sessionToken = attemptSessionToken(token);

        if (nowTimeStamp < sessionToken.expires_at) {
          return sessionToken;
        } else {
          const refreshTokenExp = jwtDecode(sessionToken.refresh_token).exp;
          if (refreshTokenExp && refreshTokenExp <= nowTimeStamp) {
            return {
              ...sessionToken,
              refresh_token_expired: true,
            };
          }

          try {
            const { access_token, refresh_token, expires_in, id_token } =
              await refreshAccessToken(sessionToken.refresh_token);
            return {
              name: sessionToken.name,
              email: sessionToken.email,
              access_token,
              decoded: attemptSessionAccessToken(jwtDecode(access_token)),
              id_token: id_token ?? sessionToken.id_token,
              expires_at: Math.floor(Date.now() / 1000) + expires_in,
              refresh_token,
            };
          } catch (error) {
            console.error(error);
            return {
              ...sessionToken,
              refresh_token_expired: true,
            };
          }
        }
      }
    },

    async session({ session, token }): Promise<SessionType> {
      // bypass validation here as we trust token generated by jwt callback
      const sessionToken = token as SessionToken;

      return {
        expires: session.expires,
        access_token: sessionToken.access_token,
        id_token: sessionToken.id_token,
        roles: sessionToken.decoded.realm_access?.roles,
        user: {
          name: sessionToken.name,
          email: sessionToken.email,
        },
        refresh_token_expired: sessionToken.refresh_token_expired,
      };
    },
  },

  cookies: cookiesOptions(),
};

/**
 * Returns pkce and state cookies options from environment variables:
 * - NEXTAUTH_PKCE_MAX_AGE pkce max age
 * - NEXTAUTH_STATE_MAX_AGE state max age
 * - NEXTAUTH_USE_SECURE_COOKIES use secure cookie, defaults to true
 */
export function cookiesOptions(): Partial<CookiesOptions> | undefined {
  const {
    pkceMaxAge,
    stateMaxAge,
    useSecureCookies = true,
  }: CookiesOptionsParams = parseCookiesOptionsParams();

  if (!pkceMaxAge && !stateMaxAge) {
    return undefined;
  }

  const cookiePrefix = useSecureCookies ? '__Secure-' : '';

  const options: Partial<CookiesOptions> = {};

  if (pkceMaxAge) {
    options.pkceCodeVerifier = {
      name: `${cookiePrefix}next-auth.pkce.code_verifier`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: useSecureCookies,
        maxAge: pkceMaxAge,
      },
    };
  }
  if (stateMaxAge) {
    options.state = {
      name: `${cookiePrefix}next-auth.state`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: useSecureCookies,
        maxAge: stateMaxAge,
      },
    };
  }

  return options;
}

function parseCookiesOptionsParams(): CookiesOptionsParams {
  return {
    pkceMaxAge: toNumber(process.env.NEXTAUTH_PKCE_MAX_AGE),
    stateMaxAge: toNumber(process.env.NEXTAUTH_STATE_MAX_AGE),
    useSecureCookies: toBoolean(process.env.NEXTAUTH_USE_SECURE_COOKIES),
  };
}

type CookiesOptionsParams = {
  pkceMaxAge: number | undefined;
  stateMaxAge: number | undefined;
  useSecureCookies: boolean | undefined;
};

function toNumber(value: string | undefined): number | undefined {
  return Number.isNaN(Number(value)) ? undefined : Number(value);
}

function toBoolean(value: string | undefined): boolean | undefined {
  switch (value && value.toLowerCase()) {
    case 'true':
      return true;
    case 'false':
      return false;
    default:
      return undefined;
  }
}

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
